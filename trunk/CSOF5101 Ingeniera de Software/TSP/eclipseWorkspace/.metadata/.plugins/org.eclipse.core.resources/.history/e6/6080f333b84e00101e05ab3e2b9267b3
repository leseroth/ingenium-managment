package com.ingenium.tsp.control;

import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.TreeMap;

import com.ingenium.tsp.report.LocRecord;
import com.ingenium.tsp.report.LogTRecord;
import com.ingenium.tsp.report.Record;

/**
 * 
 * @author Ingenium
 */
public class Report {

	private double realLoc = 0;
	private double realTime = 0;

	public Report() {
	}

	public void printFailedAnalysis(String message) {
		System.out.println("Por favor valide los datos ingresados");
		System.out.println(message);
	}

	@SuppressWarnings("unchecked")
	public void printSuccessfulAnalysis(List<String> totalOutcome,
			Map<String, List<? extends Record>> description) {
		printHeader(totalOutcome);
		// printPlan(description.get(Analizer.PLAN));
		// printLogInt(description.get(Analizer.LOG_INT));
		printLogT((List<LogTRecord>)description.get(Analizer.LOG_T));
		printLoc((List<LocRecord>)description.get(Analizer.LOC));
		// printLogD(description.get(Analizer.LOG_D),
		// description.get(Analizer.PLAN_Q));
		// printPlanQ(description.get(Analizer.PLAN_Q));
		printProductivity();
	}

	private void printHeader(List<String> totalOutcome) {
		System.out.println("Se analizaron los siguientes archivos:");
		for (String s : totalOutcome) {
			System.out.println(s);
		}
		System.out.println();
	}

	private void printPlan(List<String[]> auxArray) {
		System.out.println("Plan realizado");
		if (!auxArray.isEmpty()) {
			for (String[] array : auxArray) {
				if (array[0].indexOf("Test") == -1) {
					System.out.println("Definido en: " + array[0]
							+ ",   Tamano: " + array[1] + " locs,   Tiempo: "
							+ array[2] + " minutos");
				}
			}
		} else {
			System.out.println("No hay informacion disponible");
		}
		System.out.println();
	}

	/*
	 * private void printLogInt(List<String[]> auxArray) {
	 * System.out.println("Interrupciones"); if (!auxArray.isEmpty()) { int
	 * totalReal = 0; int totalEstimado = 0;
	 * 
	 * System.out .println(
	 * "---------------------------------------------------------------------------------------"
	 * ); System.out.printf("| %1$-20s | %2$-20s | %3$-17s | %4$s |",
	 * "Interrupcion", "Fecha", "Duracion Real", "Duracion Estimada");
	 * System.out .println(
	 * "\n---------------------------------------------------------------------------------------"
	 * ); for (String[] array : auxArray) {
	 * System.out.printf("| %1$-20s | %2$-20s | %3$17d | %4$17s |", (estimated
	 * == null ? "* " : "") + array[2], array[3], Integer.parseInt(array[4]),
	 * estimated == null ? "No registrada" : estimated); System.out.println();
	 * 
	 * totalReal += Integer.parseInt(array[4]); totalEstimado +=
	 * Integer.parseInt(estimated); } System.out .println(
	 * "---------------------------------------------------------------------------------------"
	 * ); System.out.printf("| %1$-20s | %2$-20s | %3$17d | %4$17d |", "", "",
	 * totalReal, totalEstimado); System.out .println(
	 * "\n---------------------------------------------------------------------------------------"
	 * ); } else { System.out.println("No hay informacion disponible"); }
	 * System.out.println(); }
	 */

	private void printLogT(List<String[]> auxArray) {
		System.out.println("Total de tareas realizadas");
		if (!auxArray.isEmpty()) {
			int totalReal = 0;
			int totalEstimado = 0;
			Map<String, String[]> tasks = new TreeMap<String, String[]>();

			for (String[] array : auxArray) {
				String[] info = tasks.get(array[2]);
				if (info == null) {
					info = new String[] { array[2], array[3], array[4], "0" };
					tasks.put(array[2], info);
				} else {
					info[2] = Integer.parseInt(info[2])
							+ Integer.parseInt(array[4]) + "";
				}
			}

			System.out
					.println("-------------------------------------------------------------------------------------------------");
			System.out.printf("| %1$-30s | %2$-20s | %3$-17s |",
					"Tarea", "Fecha", "Duracion Real");
			System.out
					.println("\n-------------------------------------------------------------------------------------------------");
			for (String[] info : tasks.values()) {
				realTime += Double.parseDouble(info[2]);
				System.out.printf("| %1$-30s | %2$-20s | %3$17d |",
						(info[3] == null ? "* " : "") + info[0], info[1],
						Integer.parseInt(info[2]),
						info[3] == null ? "No registrada" : info[3]);
				System.out.println();
				totalReal += Integer.parseInt(info[2]);
				totalEstimado += Integer.parseInt(info[3]);
			}
			System.out
					.println("-------------------------------------------------------------------------------------------------");
			System.out.printf("| %1$-30s | %2$-20s | %3$17d |", "",
					"", totalReal, totalEstimado);
			System.out
					.println("\n-------------------------------------------------------------------------------------------------");
		} else {
			System.out.println("No hay informacion disponible");
		}
		System.out.println();
	}

	private void printLoc(List<LocRecord> locRecordList) {
		System.out.println("Total de lineas de codigo");
		if (!locRecordList.isEmpty()) {
			int total = 0;
			System.out
					.println("-------------------------------------------------------------------------------------");
			System.out.printf("| %1$-40s | %2$-30s | %3$s |", "Clase",
					"Metodo", "LOC");
			System.out
					.println("\n-------------------------------------------------------------------------------------");
			for (LocRecord locRecord : locRecordList) {
				realLoc += locRecord.getSize();
				System.out.printf("| %1$-40s | %2$-30s | %3$5d |", locRecord.getTestClass(),
						locRecord.getTestMember(), locRecord.getSize());
				System.out.println();
				total += locRecord.getSize();
			}
			System.out
					.println("-------------------------------------------------------------------------------------");
			System.out.printf("| %1$-40s | %2$-30s | %3$5d |", "", "", total);
			System.out
					.println("\n-------------------------------------------------------------------------------------");
		} else {
			System.out.println("No hay informacion disponible");
		}
		System.out.println();
	}

	private void printLogD(List<String[]> logD, List<String[]> planQ) {
		System.out.println("Total de Errores");
		if (!logD.isEmpty()) {
			System.out
					.println("---------------------------------------------------------------------------------------------------");
			System.out.printf("| %1$-35s | %2$-30s | %3$15s | %4$6s |",
					"Clase", "Metodo", "Etapa", "Error");
			System.out
					.println("\n---------------------------------------------------------------------------------------------------");
			for (String[] array : logD) {
				System.out.printf("| %1$-35s | %2$-30s | %3$15s | %4$6s |",
						array[0], array[1], array[2], array[3]);
				System.out.println();

				/**
				 * for (STAGE stage : STAGE.values()) { if
				 * (array[2].equals(stage.getValue())) {
				 * planQ.get(stage.ordinal())[3] = new Integer(
				 * planQ.get(stage.ordinal())[3]) + 1 + ""; } }
				 **/
			}
			System.out
					.println("---------------------------------------------------------------------------------------------------");
		} else {
			System.out.println("No hay informacion disponible");
		}
		System.out.println();
	}

	private void printPlanQ(List<String[]> auxArray) {
		System.out.println("Plan de Calidad");
		if (!auxArray.isEmpty()) {
			System.out
					.println("----------------------------------------------------------------------------------------------------");
			System.out.printf(
					"| %1$-13s | %2$-26s | %3$25s | %4$10s | %5$10s |",
					"Etapa", "Planeado Inyeccion D/KLOC",
					"Planeado Remocion D/KLOC", "Defectos", "Def/KLOC");
			System.out
					.println("\n----------------------------------------------------------------------------------------------------");
			for (String[] array : auxArray) {
				System.out.printf(
						"| %1$-13s | %2$-26s | %3$25s | %4$10s | %5$,10.2f |",
						array[0], array[1], array[2], array[3], new Double(
								array[3]) * 1000 / realLoc);
				System.out.println();
			}
			System.out
					.println("----------------------------------------------------------------------------------------------------");
		} else {
			System.out.println("No hay informacion disponible");
		}
		System.out.println();
	}

	private void printProductivity() {
		System.out
				.printf(" Productividad Real: TotalLOC = %1$.0f, Total Tiempo = %2$.0f por tanto: %3$,6.2f LOC/Hora",
						realLoc, realTime, getProductivity(realLoc, realTime));
		System.out.println();
	}

	private double getProductivity(double loc, double time) {
		double productivity = 0;
		if (time != 0) {
			productivity = (loc / (time / 60));
		}

		return productivity;
	}
}
