package com.ingenium.tsp.control;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * 
 * @author Ingenium
 */
public class Control {

	private Analizer analizer;
	private List<String> totalOutcome;

	public Control() {
		init();
	}

	private void init() {
		analizer = new Analizer();
	}

	public void validateCommand(String[] commandArray) {
		boolean valid = false;
		boolean f = false;
		boolean d = false;

		if (commandArray == null || commandArray.length == 0) {
			System.out.println("Error:");
			System.out
					.println("Use -f seguido de la ruta de un archivo java dentro del proyecto para analizarlo");
			System.out
					.println("Use -d seguido de la ruta de un directorio dentro del proyecto para analizarlo");
		} else if (commandArray.length % 2 != 0) {
			System.out.println("Error");
			System.out
					.println("Error: Cada comando debe ir seguido de un solo argumento");
		} else {
			valid = true;

			for (int i = 0; valid && i < commandArray.length; i++) {
				if (i % 2 != 0) {
					valid = commandArray[i].indexOf(File.separator) != -1;
					if (!valid) {
						System.out
								.println("Error: El argumento debe ser una ruta de archivo vÃ¡lida");
					}
				} else {
					f = f | commandArray[i].equals("-f");
					d = d | commandArray[i].equals("-d");
					valid = f || d;

					if (!valid) {
						System.out.println("Error: Comando no reconocido");
					}
				}
			}

			if (valid && f && d) {
				valid = false;
				System.out
						.println("Error: Emplee solo -f o -d, pero no los dos al mismo tiempo");
			}
		}

		if (valid) {
			if (f) {
				checkFile(commandArray[1]);
			} else if (d) {
				checkDirectory(commandArray[1]);
			}
			printResult();
		}
	}

	private void printResult() {
		if (totalOutcome.get(0).contains("no existe")) {
			analizer.printFailedAnalysis(totalOutcome.get(0));
		} else {
			analizer.printSuccessfulAnalysis(totalOutcome);
		}
	}

	public List<String> checkDirectory(String directoryName) {
		totalOutcome = new ArrayList<String>();
		File directory = new File(directoryName);

		if (directory.exists() && directory.isDirectory()) {
			List<File> fileList = new ArrayList<File>();
			loadFileList(fileList, directory);

			for (File file : fileList) {
				totalOutcome.addAll(analizer.analizeFile(file));
			}
		} else {
			totalOutcome.add("El directorio " + directoryName + " no existe");
		}

		return totalOutcome;
	}

	private void loadFileList(List<File> fileList, File file) {
		if (file.isDirectory()) {
			for (File f : file.listFiles()) {
				loadFileList(fileList, f);
			}
		} else {
			fileList.add(file);
		}
	}

	public List<String> checkFile(String fileName) {
		totalOutcome = new ArrayList<String>();
		File file = new File(fileName);

		if (file.exists() && file.isFile()) {
			totalOutcome.addAll(analizer.analizeFile(file));
		} else {
			totalOutcome.add("El archivo " + fileName + " no existe");
		}

		return totalOutcome;
	}
}
